JavaScript OOP

JavaScript OOP
- Real-world development uses various programming systems
   
    1. POPS
    2. OBPS
    3. OOPS

POPS
- Process Oriented Programming System
- It supports low level features.
- It can directly interact with hardware services.
- It is fast and uses less memory.

Ex: C, Pascal

- It will not support dynamic memory.
- It is hard to reuse.
- It is hard to extend.

OPBS:
- Object Based Programming System
- It supports dynamic memory.
- It supports reusability.
- It supports separation.

Ex: JavaScript, Visual Basic
- No code level security.
- No dynamic polymorphism.
- Extensibility issues

OOPS
- Object Oriented Programming System
- It supports code reusability
- It supports code extensibility
- Code level security
- Contracts, Abstraction etc..

Ex: C++, Java, C#

- It will not support low level features.
- It can't directly interact with hardware services.
- It is uses more memory.
- It is slow in access.

Note: JavaScript is not an OOP language, it supports only few features of OOP.


                        JavaScript Modules

- A module is set of classes, functions and values.
- Every JavaScript file is considered as a module.
- Modules are used for building a library.
- A library provides set of functions and values, which are used in building an application.
- It enables reusability of code.
- To use modules in any application, we need a module system installed.
- The various module systems are
        a) Common JS
        b) Require JS
        c) UMD (Universal Module Distribution)
        d) AMD (Asynchronous Module Distribution)
        e) ES [Available in all browsers]
- To use the module system in browser you have to define script type as module.

        <script type="module">

        </script>
- Every module comprises of functions, variables and classes, which are private in access. They are not accessible outside module.

- If you want any function of class to access outside module, then you have to mark it as "export".

        export function Name()
        {
        }

FAQ: Can we mark a variable as export?
Ans: Yes only if variable is holding a function expression.

      export var  hello = 10;        // invalid

       var hello  = function() { }
       export hello;

- The functions and classes defined in a module can be accessed from any page by importing into the module scope.

syntax:
        <script type="module">
            import   {  functionName,  className } from  "moduleFileName";

        </script>

- Every module can have one member with "default" export.
- It configure eager loading of a member.
- The members without "default" export will use lazy loading.
- Lazy Loading is a pattern where the object is created and loaded only when required.

Syntax:
    export default function Addition() {

    }

    import   Addition from  "moduleName";
    import  {Addition} from "moduleName";    // invalid

- Default member must be imported first. It can't be last import.

Ex:
1. Add a new folder into project
        "library"

2. Add following files into library folder

        home.module.js

var username = "John";

export default function Hello(){
    return `Hello ! ${username}`;
}

export function Addition(a, b){
    return a + b;
}

        math.module.js


export default function Factorial(n){
    if(n==0){
        return 1;
    } else {
        return n * Factorial(n-1);
    }
}

3. Add a new HTML page in "OOP" folder

    index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="module">
        import Hello,{ Addition } from "../library/home.module.js";
        import Factorial from "../library/math.module.js";

        document.querySelector("p").innerHTML = `${Hello()}<br>Addition=${Addition(10,20)}`;
        document.querySelector("div").innerHTML = `Factorial of 5 is ${Factorial(5)}`;
    </script>
</head>
<body>
    <p></p>
    <div></div>
</body>
</html>

                        JavaScript Class
- In computer programming class is a template.
- A template comprises of sample data and logic, which you can import and customize according your requirements.
- If a class is mapping to business requirements then it is known as "Logical Entity".
- If a class is mapping to data requirements then it is known as "Model".
- Class comprises of members, which are used with reference of a object, If multiple objects are mapping to a class then it is known as "Blue Print".

Configuring Class:
- Class can be defined using
    a) Declaration
    b) Expression

Syntax: Declaration

    class  Product
    {

    }

Syntax: Expression

    var Product = class {

    }